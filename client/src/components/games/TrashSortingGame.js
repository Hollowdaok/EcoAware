import React, { useState, useEffect, useRef, useMemo } from 'react';
import { Container, Button, Modal, ProgressBar } from 'react-bootstrap';
import { useNavigate } from 'react-router-dom';
import { useAuth } from '../../contexts/AuthContext';
import './TrashSortingGame.css';

const importAllImages = (context) => {
  let images = {};
  context.keys().forEach((item) => {
    const key = item.replace('./', '').replace(/\.\w+$/, '');
    images[key] = context(item);
  });
  return images;
};

// Import all images from the trash-items directory
export const trashItemImages = importAllImages(
  require.context('../../assets/images/games', false, /\.(png|jpe?g|svg)$/)
);

// API URL
const API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';

// –ö–∞—Ç–µ–≥–æ—Ä—ñ—ó –¥–ª—è —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è —Å–º—ñ—Ç—Ç—è
const TRASH_CATEGORIES = {
  PAPER: { id: 'paper', name: '–ü–∞–ø—ñ—Ä', color: '#3498db', icon: 'üìÑ' },
  PLASTIC: { id: 'plastic', name: '–ü–ª–∞—Å—Ç–∏–∫', color: '#e74c3c', icon: 'ü•§' },
  GLASS: { id: 'glass', name: '–°–∫–ª–æ', color: '#2ecc71', icon: 'üç∂' },
  METAL: { id: 'metal', name: '–ú–µ—Ç–∞–ª', color: '#95a5a6', icon: 'ü•´' },
  ORGANIC: { id: 'organic', name: '–û—Ä–≥–∞–Ω—ñ–∫–∞', color: '#f39c12', icon: 'üçé' },
  MIXED: { id: 'mixed', name: '–ó–º—ñ—à–∞–Ω—ñ', color: '#9b59b6', icon: 'üóëÔ∏è' }
};

// –ü—Ä–µ–¥–º–µ—Ç–∏ —Å–º—ñ—Ç—Ç—è
const TRASH_ITEMS = [
  { id: 1, name: '–ì–∞–∑–µ—Ç–∞', category: TRASH_CATEGORIES.PAPER.id, image: trashItemImages['paper'] },
  { id: 2, name: '–ü–ª–∞—Å—Ç–∏–∫–æ–≤–∞ –ø–ª—è—à–∫–∞', category: TRASH_CATEGORIES.PLASTIC.id, image: trashItemImages['plastic_bottle'] },
  { id: 3, name: '–°–∫–ª—è–Ω–∞ –±–∞–Ω–∫–∞', category: TRASH_CATEGORIES.GLASS.id, image: trashItemImages['glass-jar'] },
  { id: 4, name: '–ö–æ–Ω—Å–µ—Ä–≤–Ω–∞ –±–∞–Ω–∫–∞', category: TRASH_CATEGORIES.METAL.id, image: trashItemImages['tin-can'] },
  { id: 5, name: '–Ø–±–ª—É—á–Ω–∏–π –Ω–µ–¥–æ—ó–¥–æ–∫', category: TRASH_CATEGORIES.ORGANIC.id, image: trashItemImages['apple-core'] },
  { id: 6, name: '–ö–∞—Ä—Ç–æ–Ω–Ω–∞ –∫–æ—Ä–æ–±–∫–∞', category: TRASH_CATEGORIES.PAPER.id, image: trashItemImages['cardboard-box'] },
  { id: 7, name: '–ü–ª–∞—Å—Ç–∏–∫–æ–≤–∞ —É–ø–∞–∫–æ–≤–∫–∞', category: TRASH_CATEGORIES.PLASTIC.id, image: trashItemImages['plastic-packaging'] },
  { id: 8, name: '–ü–∞–ø–µ—Ä–æ–≤–∏–π –ø–∞–∫–µ—Ç', category: TRASH_CATEGORIES.PAPER.id, image: trashItemImages['paper-bag'] },
  { id: 9, name: '–°–∫–ª—è–Ω–∞ –ø–ª—è—à–∫–∞', category: TRASH_CATEGORIES.GLASS.id, image: trashItemImages['glass-bottle'] },
  { id: 10, name: '–ê–ª—é–º—ñ–Ω—ñ—î–≤–∞ –±–∞–Ω–∫–∞', category: TRASH_CATEGORIES.METAL.id, image: trashItemImages['aluminum-can'] },
  { id: 11, name: '–ë–∞–Ω–∞–Ω–æ–≤a —à–∫—ñ—Ä–∫–∞', category: TRASH_CATEGORIES.ORGANIC.id, image: trashItemImages['banana-peel'] },
  { id: 12, name: '–ó–ª–∞–º–∞–Ω–∏–π —Ç–µ–ª–µ—Ñ–æ–Ω', category: TRASH_CATEGORIES.MIXED.id, image: trashItemImages['broken-phone'] },
  { id: 13, name: '–ü–ª—è—à–∫–∞ –≤—ñ–¥ —à–∞–º–ø—É–Ω—é', category: TRASH_CATEGORIES.PLASTIC.id, image: trashItemImages['shampoo-bottle'] },
  { id: 14, name: '–Ø—î—á–Ω–∞ —à–∫–∞—Ä–∞–ª—É–ø–∞', category: TRASH_CATEGORIES.ORGANIC.id, image: trashItemImages['eggshell'] }
  
];


// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –≥—Ä–∏
const TrashSortingGame = () => {
  // –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –∫–æ–Ω—Ç–µ–∫—Å—Ç—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó
  const { isAuthenticated } = useAuth();
  const navigate = useNavigate();
  
  // –°—Ç–∞–Ω–∏ –≥—Ä–∏
  const [gameStarted, setGameStarted] = useState(false);
  const [gameOver, setGameOver] = useState(false);
  const [level, setLevel] = useState(1);
  const [score, setScore] = useState(0);
  const [timeLeft, setTimeLeft] = useState(60);
  const [currentItems, setCurrentItems] = useState([]);
  const [draggedItem, setDraggedItem] = useState(null);
  const [results, setResults] = useState({ correct: 0, incorrect: 0, total: 0 });
  const [showTutorial, setShowTutorial] = useState(true);
  const [showResultModal, setShowResultModal] = useState(false);
  const [showAuthModal, setShowAuthModal] = useState(false);
  
  const timerRef = useRef(null);
  const gameContainerRef = useRef(null);

  // –†—ñ–≤–Ω—ñ —Å–∫–ª–∞–¥–Ω–æ—Å—Ç—ñ - –æ–±–≥–æ—Ä–Ω—É—Ç—ñ —É useMemo –¥–ª—è –∑–∞–ø–æ–±—ñ–≥–∞–Ω–Ω—è –∑–∞–π–≤–∏–º —Ä–µ—Ä–µ–Ω–¥–µ—Ä–∞–º
  const difficulties = useMemo(() => ({
    1: { itemCount: 4, timeLimit: 60, speedMultiplier: 1 },
    2: { itemCount: 4, timeLimit: 50, speedMultiplier: 1.2 },
    3: { itemCount: 4, timeLimit: 40, speedMultiplier: 1.5 }
  }), []);

  // –ì–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –≤–∏–ø–∞–¥–∫–æ–≤—ñ –ø—Ä–µ–¥–º–µ—Ç–∏ –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ —Ä—ñ–≤–Ω—è
  const generateItems = () => {
    const itemCount = difficulties[level].itemCount;
    const shuffledItems = [...TRASH_ITEMS].sort(() => 0.5 - Math.random());
    return shuffledItems.slice(0, itemCount);
  };

  // –ó–∞–ø—É—Å—Ç–∏—Ç–∏ –Ω–æ–≤—É –≥—Ä—É
  const startGame = () => {
    setGameStarted(true);
    setGameOver(false);
    setShowTutorial(false);
    setScore(0);
    
    // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —á–∞—Å –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ –¥–æ –æ–±—Ä–∞–Ω–æ–≥–æ —Ä—ñ–≤–Ω—è
    const selectedTimeLimit = difficulties[level].timeLimit;
    setTimeLeft(selectedTimeLimit);
    
    setCurrentItems(generateItems());
    setResults({ correct: 0, incorrect: 0, total: 0 });
    
    // –ó—É–ø–∏–Ω—è—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π —Ç–∞–π–º–µ—Ä, —è–∫—â–æ –≤—ñ–Ω —ñ—Å–Ω—É—î
    if (timerRef.current) {
      clearInterval(timerRef.current);
    }
    
    // –ó–∞–ø—É—Å–∫ —Ç–∞–π–º–µ—Ä–∞
    timerRef.current = setInterval(() => {
      setTimeLeft(prevTime => {
        if (prevTime <= 1) {
          clearInterval(timerRef.current);
          endGame();
          return 0;
        }
        return prevTime - 1;
      });
    }, 1000);
  };
  
  // –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è –≥—Ä–∏
  const endGame = () => {
    clearInterval(timerRef.current);
    setGameOver(true);
    setShowResultModal(true);
    
    // –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä—ñ
    saveGameResults();
  };

  // –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä—ñ
  const saveGameResults = async () => {
    try {
      // –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π, –ø–æ–∫–∞–∑—É—î–º–æ –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ –∑ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—î—é –∞–≤—Ç–æ—Ä–∏–∑—É–≤–∞—Ç–∏—Å—è
      if (!isAuthenticated) {
        setShowAuthModal(true);
        return;
      };
      
      // –ü–µ—Ä–µ–∫–æ–Ω—É—î–º–æ—Å—å, —â–æ –≤—Å—ñ –¥–∞–Ω—ñ –ø–µ—Ä–µ–¥–∞—é—Ç—å—Å—è —è–∫ —á–∏—Å–ª–∞
      const gameData = {
        level: Number(level),
        score: Number(score),
        correct: Number(results.correct),
        incorrect: Number(results.incorrect),
        total: Number(results.total),
        playTime: Number(difficulties[level].timeLimit - timeLeft)
      };
      
      const response = await fetch(`${API_URL}/games/trash-sorting/results`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        credentials: 'include', // –í–∞–∂–ª–∏–≤–æ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á—ñ cookie –∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—î—é
        body: JSON.stringify(gameData),
      });
      
      let data;
      
      try {
        // –°–ø–æ—á–∞—Ç–∫—É –æ—Ç—Ä–∏–º—É—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å —è–∫ —Ç–µ–∫—Å—Ç
        const textResponse = await response.text();
        
        // –°–ø—Ä–æ–±—É—î–º–æ —Ä–æ–∑–ø–∞—Ä—Å–∏—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å —è–∫ JSON
        try {
          data = JSON.parse(textResponse);
        } catch (parseError) {
          console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ä–æ–∑–±–æ—Ä—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ —Å–µ—Ä–≤–µ—Ä–∞ —è–∫ JSON:', parseError);
          data = { message: textResponse }; // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ç–µ–∫—Å—Ç —è–∫ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        }
      } catch (responseError) {
        console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —á–∏—Ç–∞–Ω–Ω—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ —Å–µ—Ä–≤–µ—Ä–∞:', responseError);
        throw new Error(`–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ —Å–µ—Ä–≤–µ—Ä–∞: ${responseError.message}`);
      }
      
      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å—Ç–∞—Ç—É—Å –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
      if (!response.ok) {
        // –î–µ—Ç–∞–ª—å–Ω–∏–π –ª–æ–≥ –¥–ª—è –ø–æ–º–∏–ª–∫–∏
        console.error('–í—ñ–¥–ø–æ–≤—ñ–¥—å —Å–µ—Ä–≤–µ—Ä–∞ –∑ –ø–æ–º–∏–ª–∫–æ—é:', response.status, data);
        
        // –Ø–∫—â–æ –ø–æ–º–∏–ª–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó, –ø—Ä–æ–ø–æ–Ω—É—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É –∞–≤—Ç–æ—Ä–∏–∑—É–≤–∞—Ç–∏—Å—è
        if (response.status === 401) {
          setShowAuthModal(true);
          throw new Error(`–î–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑—É–≤–∞—Ç–∏—Å—è`);
        }
        
        throw new Error(`HTTP –ø–æ–º–∏–ª–∫–∞ ${response.status}: ${JSON.stringify(data)}`);
      }
      
      return data;
    } catch (error) {
      console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤:', error);
      
      // –Ø–∫—â–æ —Ü–µ –ø–æ–º–∏–ª–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó, –ø—Ä–æ–ø–æ–Ω—É—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É –∞–≤—Ç–æ—Ä–∏–∑—É–≤–∞—Ç–∏—Å—è
      if (error.message && (error.message.includes('401') || error.message.includes('–∞–≤—Ç–æ—Ä–∏–∑—É–≤–∞—Ç–∏—Å—è'))) {
        setShowAuthModal(true);
      }
      
      return null;
    }
  };

const handleDrop = (category, e) => {
  e.preventDefault();
  
  // –ë–µ–∑–ø–µ—á–Ω–æ –≤–∏–¥–∞–ª—è—î–º–æ –∫–ª–∞—Å, –ø–µ—Ä–µ–≤—ñ—Ä–∏–≤—à–∏, —â–æ e.currentTarget —ñ—Å–Ω—É—î
  if (e.currentTarget) {
    e.currentTarget.classList.remove('drag-over');
  }
  
  if (draggedItem) {
    const isCorrect = draggedItem.category === category.id;
    
    // –ó–Ω–∞—Ö–æ–¥–∏–º–æ –µ–ª–µ–º–µ–Ω—Ç, —è–∫–∏–π –ø–µ—Ä–µ—Ç—è–≥–Ω—É–ª–∏
    const draggedElement = document.querySelector(`.trash-item[data-id="${draggedItem.id}"]`);
    
    if (draggedElement && e.currentTarget) {
      // –û—Ç—Ä–∏–º—É—î–º–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ —Ü—ñ–ª—ñ (–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞)
      const targetRect = e.currentTarget.getBoundingClientRect();
      const targetCenterX = targetRect.left + targetRect.width / 2;
      const targetCenterY = targetRect.top + targetRect.height / 2;
      
      // –°—Ç–≤–æ—Ä—é—î–º–æ –∞–Ω—ñ–º–æ–≤–∞–Ω–∏–π –µ–ª–µ–º–µ–Ω—Ç
      const animatedItem = draggedElement.cloneNode(true);
      animatedItem.style.position = 'fixed';
      animatedItem.style.zIndex = '9999';
      animatedItem.style.width = '100px';
      animatedItem.style.height = '120px';
      animatedItem.style.left = `${draggedElement.getBoundingClientRect().left}px`;
      animatedItem.style.top = `${draggedElement.getBoundingClientRect().top}px`;
      animatedItem.style.transition = 'all 0.3s ease-in-out';
      animatedItem.style.pointerEvents = 'none';
      
      document.body.appendChild(animatedItem);
      
      // –°–ø–æ—á–∞—Ç–∫—É —Ö–æ–≤–∞—î–º–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–π –µ–ª–µ–º–µ–Ω—Ç
      draggedElement.style.opacity = '0';
      
      // –ó–∞–ø—É—Å–∫–∞—î–º–æ –∞–Ω—ñ–º–∞—Ü—ñ—é –ø–µ—Ä–µ–º—ñ—â–µ–Ω–Ω—è –¥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
      setTimeout(() => {
        animatedItem.style.left = `${targetCenterX - 50}px`;
        animatedItem.style.top = `${targetCenterY - 60}px`;
        animatedItem.style.opacity = '0.7';
        animatedItem.style.transform = 'scale(0.7)';
      }, 10);
      
      // –î–æ–¥–∞—î–º–æ –∞–Ω—ñ–º–∞—Ü—ñ—é –¥–ª—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
      e.currentTarget.classList.add(isCorrect ? 'correct-sort' : 'incorrect-sort');
      
      // –í–∏–¥–∞–ª—è—î–º–æ –∞–Ω—ñ–º–æ–≤–∞–Ω–∏–π –µ–ª–µ–º–µ–Ω—Ç –ø—ñ—Å–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –∞–Ω—ñ–º–∞—Ü—ñ—ó
      setTimeout(() => {
        if (document.body.contains(animatedItem)) {
          document.body.removeChild(animatedItem);
        }
        if (e.currentTarget) {
          e.currentTarget.classList.remove('correct-sort', 'incorrect-sort');
        }
      }, 400);
    }
    
    // –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
    const newResults = { ...results };
    newResults.total += 1;
    
    if (isCorrect) {
      // –î–æ–¥–∞—î–º–æ –æ—á–∫–∏ –∑–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å (10 * —Ä—ñ–≤–µ–Ω—å —Å–∫–ª–∞–¥–Ω–æ—Å—Ç—ñ)
      setScore(prevScore => prevScore + 10 * level);
      newResults.correct += 1;
    } else {
      // –í—ñ–¥–Ω—ñ–º–∞—î–º–æ –æ—á–∫–∏ –∑–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å (5 * —Ä—ñ–≤–µ–Ω—å —Å–∫–ª–∞–¥–Ω–æ—Å—Ç—ñ)
      // –∞–ª–µ –Ω–µ –¥–æ–∑–≤–æ–ª—è—î–º–æ —Ä–∞—Ö—É–Ω–∫—É —Å—Ç–∞—Ç–∏ –º–µ–Ω—à–µ 0
      setScore(prevScore => Math.max(0, prevScore - 5 * level));
      newResults.incorrect += 1;
    }
    
    setResults(newResults);
    
    // –í–∏–¥–∞–ª–µ–Ω–Ω—è –ø—Ä–µ–¥–º–µ—Ç–∞ –∑ –ø–æ—Ç–æ—á–Ω–∏—Ö —ñ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–æ–≥–æ
    setCurrentItems(prevItems => {
      const updatedItems = prevItems.filter(item => item.id !== draggedItem.id);
      const newItem = TRASH_ITEMS.find(item => !prevItems.some(i => i.id === item.id) && 
                                       !updatedItems.some(i => i.id === item.id));
      
      if (newItem && updatedItems.length < difficulties[level].itemCount) {
        return [...updatedItems, newItem];
      }
      
      // –Ø–∫—â–æ –Ω–µ –∑–∞–ª–∏—à–∏–ª–æ—Å—å –Ω–æ–≤–∏—Ö –ø—Ä–µ–¥–º–µ—Ç—ñ–≤, –∑–∞–∫—ñ–Ω—á—É—î–º–æ –≥—Ä—É
      if (updatedItems.length === 0) {
        endGame();
      }
      
      return updatedItems;
    });
    
    setDraggedItem(null);
  }
};

// –ë–µ–∑–ø–µ—á–Ω–∏–π –æ–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è handleDragOver
const handleDragOver = (e) => {
  e.preventDefault();
  // –î–æ–¥–∞—î–º–æ –∫–ª–∞—Å –¥–ª—è –ø—ñ–¥—Å–≤—ñ—á—É–≤–∞–Ω–Ω—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞, –Ω–∞–¥ —è–∫–∏–º –∑–∞—Ä–∞–∑ –ø–µ—Ä–µ—Ç—è–≥—É—î—Ç—å—Å—è –ø—Ä–µ–¥–º–µ—Ç
  if (e.currentTarget) {
    e.currentTarget.classList.add('drag-over');
  }
};

// –ë–µ–∑–ø–µ—á–Ω–∏–π –æ–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è handleDragLeave
const handleDragLeave = (e) => {
  // –í–∏–¥–∞–ª—è—î–º–æ –∫–ª–∞—Å –ø—ñ–¥—Å–≤—ñ—á—É–≤–∞–Ω–Ω—è –ø—Ä–∏ –≤–∏—Ö–æ–¥—ñ –∑ –∑–æ–Ω–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
  if (e.currentTarget) {
    e.currentTarget.classList.remove('drag-over');
  }
};

// –ë–µ–∑–ø–µ—á–Ω–∏–π –æ–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è handleDragEnd
const handleDragEnd = () => {
  // –°–∫–∏–¥–∞—î–º–æ —Å—Ç–∞–Ω –ø–µ—Ä–µ—Ç—è–≥—É–≤–∞–Ω–Ω—è
  setDraggedItem(null);
  
  // –í–∏–¥–∞–ª—è—î–º–æ –∫–ª–∞—Å –ø—ñ–¥—Å–≤—ñ—á—É–≤–∞–Ω–Ω—è –∑ —É—Å—ñ—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ–≤
  const bins = document.querySelectorAll('.trash-bin');
  if (bins) {
    bins.forEach(bin => {
      if (bin) {
        bin.classList.remove('drag-over');
      }
    });
  }
};


const handleDragStart = (item, e) => {
  setDraggedItem(item);
  
  // –°—Ç–≤–æ—Ä—é—î–º–æ –≤–ª–∞—Å–Ω–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –¥–ª—è –ø–µ—Ä–µ—Ç—è–≥—É–≤–∞–Ω–Ω—è
  if (e.dataTransfer) {
    e.dataTransfer.setData('text/plain', item.id);
    
    try {
      // –°—Ç–≤–æ—Ä—é—î–º–æ –≤–ª–∞—Å–Ω–∏–π –µ–ª–µ–º–µ–Ω—Ç –¥–ª—è –ø–µ—Ä–µ—Ç—è–≥—É–≤–∞–Ω–Ω—è
      const dragImage = document.createElement('div');
      dragImage.className = 'custom-drag-image';
      
      const img = document.createElement('img');
      img.src = item.image;
      img.alt = item.name;
      img.style.width = '75px';
      img.style.height = '75px';
      img.style.objectFit = 'contain';
      
      const name = document.createElement('div');
      name.textContent = item.name;
      name.style.fontSize = '12px';
      name.style.textAlign = 'center';
      name.style.backgroundColor = 'rgba(255, 255, 255, 0.8)';
      name.style.padding = '2px';
      name.style.borderRadius = '3px';
      
      dragImage.appendChild(img);
      dragImage.appendChild(name);
      
      // –î–æ–¥–∞—î–º–æ –µ–ª–µ–º–µ–Ω—Ç –≤ DOM (–≤—ñ–Ω –±—É–¥–µ —Ç–∏–º—á–∞—Å–æ–≤–∏–π)
      document.body.appendChild(dragImage);
      
      // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –µ–ª–µ–º–µ–Ω—Ç —è–∫ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –¥–ª—è –ø–µ—Ä–µ—Ç—è–≥—É–≤–∞–Ω–Ω—è
      e.dataTransfer.setDragImage(dragImage, 40, 40);
      
      // –í–∏–¥–∞–ª—è—î–º–æ —Ç–∏–º—á–∞—Å–æ–≤–∏–π –µ–ª–µ–º–µ–Ω—Ç –ø—ñ—Å–ª—è –∫–æ—Ä–æ—Ç–∫–æ—ó –∑–∞—Ç—Ä–∏–º–∫–∏
      setTimeout(() => {
        if (document.body.contains(dragImage)) {
          document.body.removeChild(dragImage);
        }
      }, 0);
    } catch (error) {
      console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ drag image:', error);
      // –Ø–∫—â–æ –≤–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π —Å–ø–æ—Å—ñ–± (–±–µ–∑ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è)
    }
  }
};
  // –û–±—Ä–æ–±–Ω–∏–∫ –ø–µ—Ä–µ—Ö–æ–¥—É –Ω–∞ –Ω–∞—Å—Ç—É–ø–Ω–∏–π —Ä—ñ–≤–µ–Ω—å
  const handleNextLevel = () => {
    if (level < 3) {
      setLevel(prevLevel => prevLevel + 1);
      setShowResultModal(false);
      startGame();
    } else {
      // –Ø–∫—â–æ —Ü–µ –±—É–≤ –æ—Å—Ç–∞–Ω–Ω—ñ–π —Ä—ñ–≤–µ–Ω—å
      setShowResultModal(false);
      setGameStarted(false);
      setLevel(1);
    }
  };

  // –û–±—Ä–æ–±–Ω–∏–∫ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫—É –ø–æ—Ç–æ—á–Ω–æ–≥–æ —Ä—ñ–≤–Ω—è
  const handleRetryLevel = () => {
    setShowResultModal(false);
    startGame();
  };
  
  // –û–±—Ä–æ–±–Ω–∏–∫ –ø–µ—Ä–µ—Ö–æ–¥—É –¥–æ —Å—Ç–æ—Ä—ñ–Ω–∫–∏ –≤—Ö–æ–¥—É
  const handleLogin = () => {
    setShowAuthModal(false);
    navigate('/login?redirect=/games/trash-sorting');
  };
  
  // –û–±—Ä–æ–±–Ω–∏–∫ –ø–µ—Ä–µ—Ö–æ–¥—É –¥–æ —Å—Ç–æ—Ä—ñ–Ω–∫–∏ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó
  const handleRegister = () => {
    setShowAuthModal(false);
    navigate('/register?redirect=/games/trash-sorting');
  };

  // –û—á–∏—â–µ–Ω–Ω—è —Ç–∞–π–º–µ—Ä–∞ –ø—Ä–∏ —Ä–æ–∑–º–æ–Ω—Ç—É–≤–∞–Ω–Ω—ñ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  useEffect(() => {
    return () => {
      clearInterval(timerRef.current);
    };
  }, []);

  // –û–Ω–æ–≤–ª—é—î–º–æ —á–∞—Å –ø—Ä–∏ –∑–º—ñ–Ω—ñ —Ä—ñ–≤–Ω—è —Å–∫–ª–∞–¥–Ω–æ—Å—Ç—ñ
  useEffect(() => {
    if (gameStarted) {
      setTimeLeft(difficulties[level].timeLimit);
    } else {
      // –Ø–∫—â–æ –≥—Ä–∞ —â–µ –Ω–µ –ø–æ—á–∞–ª–∞—Å—è, —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ timeLeft –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ –¥–æ –≤–∏–±—Ä–∞–Ω–æ–≥–æ —Ä—ñ–≤–Ω—è
      setTimeLeft(difficulties[level].timeLimit);
    }
  }, [level, gameStarted, difficulties]);

  return (
    <Container className="trash-sorting-game">
      {showTutorial ? (
        <div className="game-tutorial">
          <h2>–ì—Ä–∞ "–°–æ—Ä—Ç—É–≤–∞–Ω–Ω—è —Å–º—ñ—Ç—Ç—è"</h2>
          <p>–ù–∞–≤—á—ñ—Ç—å—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Å–æ—Ä—Ç—É–≤–∞—Ç–∏ –≤—ñ–¥—Ö–æ–¥–∏ –¥–ª—è –ø–µ—Ä–µ—Ä–æ–±–∫–∏!</p>
          
          <div className="tutorial-steps">
            <h3>–Ø–∫ –≥—Ä–∞—Ç–∏:</h3>
            <ol>
              <li>–ü–µ—Ä–µ—Ç—è–≥—É–π—Ç–µ –ø—Ä–µ–¥–º–µ—Ç–∏ –¥–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∏—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ–≤ –¥–ª—è —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è</li>
              <li>–ó–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–µ —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è –æ—Ç—Ä–∏–º—É—î—Ç–µ –æ—á–∫–∏</li>
              <li>–ù–∞–º–∞–≥–∞–π—Ç–µ—Å—è –≤—ñ–¥—Å–æ—Ä—Ç—É–≤–∞—Ç–∏ —è–∫–æ–º–æ–≥–∞ –±—ñ–ª—å—à–µ –ø—Ä–µ–¥–º–µ—Ç—ñ–≤ –¥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è —á–∞—Å—É</li>
              <li>–ó –∫–æ–∂–Ω–∏–º —Ä—ñ–≤–Ω–µ–º —Å–∫–ª–∞–¥–Ω—ñ—Å—Ç—å –∑—Ä–æ—Å—Ç–∞—î</li>
            </ol>
          </div>
          
          <div className="difficulty-select">
            <h3>–í–∏–±–µ—Ä—ñ—Ç—å —Ä—ñ–≤–µ–Ω—å —Å–∫–ª–∞–¥–Ω–æ—Å—Ç—ñ:</h3>
            <div className="difficulty-buttons">
              <Button variant="success" onClick={() => { setLevel(1); startGame(); }}>
                –õ–µ–≥–∫–∏–π (60 —Å–µ–∫)
              </Button>
              <Button variant="warning" onClick={() => { setLevel(2); startGame(); }}>
                –°–µ—Ä–µ–¥–Ω—ñ–π (50 —Å–µ–∫)
              </Button>
              <Button variant="danger" onClick={() => { setLevel(3); startGame(); }}>
                –°–∫–ª–∞–¥–Ω–∏–π (40 —Å–µ–∫)
              </Button>
            </div>
          </div>
        </div>
      ) : (
        <>
          {gameStarted && !gameOver && (
            <div className="game-interface" ref={gameContainerRef}>
              <div className="game-header">
                <div className="game-info">
                  <div className="level-indicator">–†—ñ–≤–µ–Ω—å: {level}</div>
                  <div className="score-indicator">–†–∞—Ö—É–Ω–æ–∫: {score}</div>
                </div>
                <div className="timer">
                  <div className="time-left">–ß–∞—Å: {timeLeft} —Å–µ–∫</div>
                  <ProgressBar 
                    now={timeLeft} 
                    max={difficulties[level].timeLimit} 
                    variant={timeLeft < 10 ? "danger" : timeLeft < 20 ? "warning" : "success"} 
                  />
                </div>
              </div>
              
              <div className="game-content">
                <div className="trash-items-container">
                  {currentItems.map(item => (
                    <div 
                      key={item.id}
                      className="trash-item"
                      data-id={item.id}
                      draggable
                      onDragStart={(e) => handleDragStart(item, e)}
                      onDragEnd={handleDragEnd}
                    >
                      <img src={item.image} alt={item.name} />
                      <div className="item-name">{item.name}</div>
                    </div>
                  ))}
                </div>
                
                <div className="trash-bins-container">
                  {Object.values(TRASH_CATEGORIES).map(category => (
                    <div 
                      key={category.id}
                      className="trash-bin"
                      style={{ backgroundColor: category.color }}
                      onDragOver={handleDragOver}
                      onDragLeave={handleDragLeave}
                      onDrop={(e) => handleDrop(category, e)}
                    >
                      <div className="bin-icon">{category.icon}</div>
                      <div className="bin-name">{category.name}</div>
                    </div>
                  ))}
                </div>
              </div>
              
              <div className="game-footer">
                <div className="stats">
                  <div>–ü—Ä–∞–≤–∏–ª—å–Ω–æ: {results.correct}</div>
                  <div>–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ: {results.incorrect}</div>
                </div>
                <Button variant="secondary" onClick={endGame}>–ó–∞–≤–µ—Ä—à–∏—Ç–∏ –≥—Ä—É</Button>
              </div>
            </div>
          )}
          
          {(!gameStarted || gameOver) && !showResultModal && (
            <div className="game-menu">
              <h2>–ì—Ä–∞ "–°–æ—Ä—Ç—É–≤–∞–Ω–Ω—è —Å–º—ñ—Ç—Ç—è"</h2>
              <p>–ù–∞–≤—á—ñ—Ç—å—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Å–æ—Ä—Ç—É–≤–∞—Ç–∏ –≤—ñ–¥—Ö–æ–¥–∏ –¥–ª—è –ø–µ—Ä–µ—Ä–æ–±–∫–∏!</p>
              <Button variant="primary" size="lg" onClick={startGame}>
                {gameOver ? '–ì—Ä–∞—Ç–∏ –∑–Ω–æ–≤—É' : '–ü–æ—á–∞—Ç–∏ –≥—Ä—É'}
              </Button>
              {gameOver && (
                <div className="game-over-stats">
                  <h3>–†–µ–∑—É–ª—å—Ç–∞—Ç–∏:</h3>
                  <p>–†—ñ–≤–µ–Ω—å: {level}</p>
                  <p>–†–∞—Ö—É–Ω–æ–∫: {score}</p>
                  <p>–ü—Ä–∞–≤–∏–ª—å–Ω–æ –≤—ñ–¥—Å–æ—Ä—Ç–æ–≤–∞–Ω–æ: {results.correct}</p>
                  <p>–ü–æ–º–∏–ª–∫–∏: {results.incorrect}</p>
                </div>
              )}
            </div>
          )}
        </>
      )}

      {/* –ú–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ */}
      <Modal show={showResultModal} onHide={() => setShowResultModal(false)} centered>
        <Modal.Header closeButton>
          <Modal.Title>–†–µ–∑—É–ª—å—Ç–∞—Ç–∏ —Ä—ñ–≤–Ω—è {level}</Modal.Title>
        </Modal.Header>
        <Modal.Body>
          <div className="results-container">
            <h3>–í—ñ—Ç–∞—î–º–æ!</h3>
            <p>–í–∏ –Ω–∞–±—Ä–∞–ª–∏: <strong>{score} –æ—á–∫—ñ–≤</strong></p>
            <div className="results-stats">
              <p>–ü—Ä–∞–≤–∏–ª—å–Ω–æ –≤—ñ–¥—Å–æ—Ä—Ç–æ–≤–∞–Ω–æ: {results.correct}</p>
              <p>–ü–æ–º–∏–ª–æ–∫: {results.incorrect}</p>
              <p>–¢–æ—á–Ω—ñ—Å—Ç—å: {results.total > 0 ? Math.round((results.correct / results.total) * 100) : 0}%</p>
            </div>
            
            {!isAuthenticated && (
              <div className="auth-notification">
                <div className="auth-message">
                  <i className="bi bi-exclamation-circle"></i>
                  <p><strong>–£–≤—ñ–π–¥—ñ—Ç—å –∞–±–æ –∑–∞—Ä–µ—î—Å—Ç—Ä—É–π—Ç–µ—Å—å</strong> –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ 
                  —Ç–∞ —É—á–∞—Å—Ç—ñ –≤ —Ç–∞–±–ª–∏—Ü—ñ —Ä–µ–∫–æ—Ä–¥—ñ–≤!</p>
                </div>
                <div className="auth-buttons">
                  <Button 
                    variant="outline-primary" 
                    size="sm"
                    onClick={() => setShowAuthModal(true)}
                  >
                    –í—Ö—ñ–¥ / –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è
                  </Button>
                </div>
              </div>
            )}
            
            <div className="eco-fact">
              <h4>–ß–∏ –∑–Ω–∞—î—Ç–µ –≤–∏?</h4>
              <p>–ü—Ä–∞–≤–∏–ª—å–Ω–µ —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è –≤—ñ–¥—Ö–æ–¥—ñ–≤ –¥–æ–∑–≤–æ–ª—è—î –ø–µ—Ä–µ—Ä–æ–±–ª—è—Ç–∏ –¥–æ 70% —Å–º—ñ—Ç—Ç—è, –∑–Ω–∞—á–Ω–æ –∑–º–µ–Ω—à—É—é—á–∏ –∑–∞–±—Ä—É–¥–Ω–µ–Ω–Ω—è –Ω–∞–≤–∫–æ–ª–∏—à–Ω—å–æ–≥–æ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞.</p>
            </div>
          </div>
        </Modal.Body>
        <Modal.Footer>
          <Button variant="secondary" onClick={handleRetryLevel}>
            –°–ø—Ä–æ–±—É–≤–∞—Ç–∏ —â–µ —Ä–∞–∑
          </Button>
          {level < 3 ? (
            <Button variant="primary" onClick={handleNextLevel}>
              –ù–∞—Å—Ç—É–ø–Ω–∏–π —Ä—ñ–≤–µ–Ω—å
            </Button>
          ) : (
            <Button variant="success" onClick={() => {
              setShowResultModal(false);
              setGameStarted(false);
              setLevel(1);
            }}>
              –ó–∞–≤–µ—Ä—à–∏—Ç–∏ –≥—Ä—É
            </Button>
          )}
        </Modal.Footer>
      </Modal>
      
      {/* –ú–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó */}
      <Modal show={showAuthModal} onHide={() => setShowAuthModal(false)} centered>
        <Modal.Header closeButton>
          <Modal.Title>–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è</Modal.Title>
        </Modal.Header>
        <Modal.Body>
          <div className="auth-modal-content">
            <p className="text-center mb-4">
              –î–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ —Ç–∞ —É—á–∞—Å—Ç—ñ –≤ —Ä–µ–π—Ç–∏–Ω–≥—É, –±—É–¥—å –ª–∞—Å–∫–∞, 
              —É–≤—ñ–π–¥—ñ—Ç—å —É —Å–≤—ñ–π –æ–±–ª—ñ–∫–æ–≤–∏–π –∑–∞–ø–∏—Å –∞–±–æ —Å—Ç–≤–æ—Ä—ñ—Ç—å –Ω–æ–≤–∏–π.
            </p>
            
            <div className="d-grid gap-3">
              <Button 
                variant="primary" 
                size="lg" 
                onClick={handleLogin}
                className="w-100"
              >
                –£–≤—ñ–π—Ç–∏
              </Button>
              
              <Button 
                variant="outline-primary" 
                size="lg" 
                onClick={handleRegister}
                className="w-100"
              >
                –ó–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—è
              </Button>
              
              <div className="mt-3 text-center text-muted">
                <small>
                  –ü—ñ—Å–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó –≤–∞—à—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –±—É–¥—É—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω—ñ
                  —Ç–∞ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω—ñ –≤ —Ç–∞–±–ª–∏—Ü—ñ —Ä–µ–∫–æ—Ä–¥—ñ–≤.
                </small>
              </div>
            </div>
          </div>
        </Modal.Body>
      </Modal>
    </Container>
  );
};

export default TrashSortingGame;